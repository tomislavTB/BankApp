// <auto-generated />
using System;
using BankApp.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BankApp.Migrations
{
    [DbContext(typeof(BankContext))]
    [Migration("20190724150738_AddSeeds")]
    partial class AddSeeds
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BankApp.Models.AccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("AccountTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Current Account"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Savings Account"
                        });
                });

            modelBuilder.Entity("BankApp.Models.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("IBAN")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Banks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            Email = "PBZ@nesto.com",
                            IBAN = "221111111111111",
                            Name = "PBZ",
                            Phone = "0915555555"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 2,
                            Email = "ParisBank@nesto.com",
                            IBAN = "331111111111111",
                            Name = "The Paris National Bank",
                            Phone = "0917777777"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 2,
                            Email = "NYbank@nesto.com",
                            IBAN = "441111111111111",
                            Name = "Bank of New York",
                            Phone = "0918888888"
                        },
                        new
                        {
                            Id = 4,
                            CityId = 2,
                            Email = "Lloyds@nesto.com",
                            IBAN = "551111111111111",
                            Name = "Lloyds Bank",
                            Phone = "0919991111"
                        },
                        new
                        {
                            Id = 5,
                            CityId = 2,
                            Email = "Rabobank@nesto.com",
                            IBAN = "661111111111111",
                            Name = "Rabobank",
                            Phone = "0918751111"
                        });
                });

            modelBuilder.Entity("BankApp.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "Zagreb",
                            Zip = "10000"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 2,
                            Name = "New York",
                            Zip = "10001"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 4,
                            Name = "London ",
                            Zip = "56273"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 3,
                            Name = "Paris",
                            Zip = "75000"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 5,
                            Name = "Amsterdam ",
                            Zip = "1011"
                        });
                });

            modelBuilder.Entity("BankApp.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<DateTime>("Birthdate");

                    b.Property<int>("CityId");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("IBAN")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Tatooine 5",
                            Birthdate = new DateTime(1996, 3, 1, 11, 30, 15, 0, DateTimeKind.Unspecified),
                            CityId = 1,
                            Email = "lukeS@nesto.com",
                            FirstName = "Luke",
                            IBAN = "111111111111111",
                            LastName = "Skywalker"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Naboo  3",
                            Birthdate = new DateTime(1989, 1, 15, 10, 30, 15, 0, DateTimeKind.Unspecified),
                            CityId = 2,
                            Email = "Anakin@nesto.com",
                            FirstName = "Darth",
                            IBAN = "22222222222222",
                            LastName = "Vader"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Alderaan  5",
                            Birthdate = new DateTime(1996, 3, 1, 11, 30, 15, 0, DateTimeKind.Unspecified),
                            CityId = 1,
                            Email = "Princess@nesto.com",
                            FirstName = "Leia",
                            IBAN = "333333333333333",
                            LastName = "Organa"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Cantonica 9",
                            Birthdate = new DateTime(1994, 3, 1, 11, 30, 15, 0, DateTimeKind.Unspecified),
                            CityId = 1,
                            Email = "Chewie@nesto.com",
                            FirstName = "Han",
                            IBAN = "444444444444444",
                            LastName = "Solo"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Dagobah 17",
                            Birthdate = new DateTime(1984, 3, 1, 11, 30, 15, 0, DateTimeKind.Unspecified),
                            CityId = 1,
                            Email = "obi_wan@nesto.com",
                            FirstName = "Obi-Wan",
                            IBAN = "555555555555555",
                            LastName = "Kenobi"
                        });
                });

            modelBuilder.Entity("BankApp.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Croatia"
                        },
                        new
                        {
                            Id = 2,
                            Name = "United States"
                        },
                        new
                        {
                            Id = 3,
                            Name = "France"
                        },
                        new
                        {
                            Id = 4,
                            Name = "England"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Netherlands"
                        });
                });

            modelBuilder.Entity("BankApp.Models.Saving", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountTypeId");

                    b.Property<int>("Amount");

                    b.Property<int>("BankId");

                    b.Property<int>("ClientId");

                    b.Property<decimal>("Interest_rate");

                    b.Property<DateTime>("StartOfSaving");

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("BankId");

                    b.HasIndex("ClientId");

                    b.ToTable("Savings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountTypeId = 1,
                            Amount = 500000,
                            BankId = 1,
                            ClientId = 1,
                            Interest_rate = 0.2m,
                            StartOfSaving = new DateTime(2015, 3, 1, 11, 30, 15, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AccountTypeId = 2,
                            Amount = 100000,
                            BankId = 2,
                            ClientId = 2,
                            Interest_rate = 0.0m,
                            StartOfSaving = new DateTime(2017, 4, 1, 13, 30, 15, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AccountTypeId = 1,
                            Amount = 700000,
                            BankId = 3,
                            ClientId = 3,
                            Interest_rate = 0.3m,
                            StartOfSaving = new DateTime(2018, 1, 1, 15, 30, 15, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            AccountTypeId = 2,
                            Amount = 180000,
                            BankId = 4,
                            ClientId = 4,
                            Interest_rate = 0.0m,
                            StartOfSaving = new DateTime(2011, 7, 1, 9, 30, 15, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            AccountTypeId = 1,
                            Amount = 175800,
                            BankId = 5,
                            ClientId = 5,
                            Interest_rate = 0.4m,
                            StartOfSaving = new DateTime(2014, 9, 1, 7, 30, 15, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("BankApp.Models.Bank", b =>
                {
                    b.HasOne("BankApp.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BankApp.Models.City", b =>
                {
                    b.HasOne("BankApp.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BankApp.Models.Client", b =>
                {
                    b.HasOne("BankApp.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BankApp.Models.Saving", b =>
                {
                    b.HasOne("BankApp.Models.AccountType", "AccountType")
                        .WithMany()
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BankApp.Models.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BankApp.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
